import axios from "axios";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime); // H·ªó tr·ª£ hi·ªÉn th·ªã th·ªùi gian t∆∞∆°ng ƒë·ªëi (VD: "2 gi·ªù tr∆∞·ªõc")

export default class ApiService {
  static BASE_URL = "http://localhost:8080";

  static getHeader() {
    const token = localStorage.getItem("token");
    return {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    };
  }

  /** AUTH */
  static async registerUser(registrationData) {
    try {
      const response = await axios.post(
        `${this.BASE_URL}/api/auth/signup`,
        registrationData,
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      return response.data; // ƒêƒÉng k√Ω th√†nh c√¥ng
    } catch (error) {
      if (error.response && error.response.data) {
        // L·∫•y d·ªØ li·ªáu ph·∫£n h·ªìi l·ªói t·ª´ server
        const errorData = error.response.data;

        // Ki·ªÉm tra n·∫øu errorData l√† object v√† c√≥ thu·ªôc t√≠nh message
        const errorMessage =
          typeof errorData === "string"
            ? errorData
            : errorData.message || JSON.stringify(errorData);

        // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ t·ª´ backend
        if (errorMessage.toLowerCase().includes("username is already taken")) {
          throw new Error("T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn t√™n kh√°c.");
        }
        if (errorMessage.toLowerCase().includes("email is already in use")) {
          throw new Error(
            "Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω, vui l√≤ng s·ª≠ d·ª•ng email kh√°c."
          );
        }
      }

      // N·∫øu kh√¥ng c√≥ th√¥ng tin l·ªói chi ti·∫øt t·ª´ backend
      throw new Error("ƒêƒÉng k√Ω th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
    }
  }

  static async loginUser(loginDetails) {
    const response = await axios.post(
      `${this.BASE_URL}/api/auth/login`,
      loginDetails
    );
    return response.data;
  }

  /** USERS */
  static async getAllUsers() {
    const response = await axios.get(`${this.BASE_URL}/api/admin/users`, {
      headers: this.getHeader(),
    });
    return response.data;
  }

  static async getAllNotifications() {
    const response = await axios.get(
      `${this.BASE_URL}/api/posts/notification`,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }

  static async getNotificationsUnread() {
    const response = await axios.get(
      `${this.BASE_URL}/api/posts/notification/unread`,
      {
        headers: this.getHeader(),
      }
    );
    console.log("üîî D·ªØ li·ªáu th√¥ng b√°o:", response.data); // Ki·ªÉm tra d·ªØ li·ªáu
    return response.data;
  }

  static async markNotificationAsRead(notificationId) {
    const response = await axios.put(
      `${this.BASE_URL}/api/posts/${notificationId}/read`,
      {},
      { headers: this.getHeader() }
    );
    return response.data;
  }

  static async getUserProfile() {
    try {
      const response = await axios.get(`${this.BASE_URL}/api/auth/me`, {
        headers: this.getHeader(),
        withCredentials: true,
      });
      return response.data;
    } catch (error) {
      console.error(
        "L·ªói l·∫•y th√¥ng tin user:",
        error.response?.data || error.message
      );
      throw error;
    }
  }
  static async uploadUserAvatar(data) {
    const response = await axios.post(
      `${this.BASE_URL}/api/user/upload-avatar`,
      data,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }
  static async updateUserProfile(data) {
    const response = await axios.put(
      `${this.BASE_URL}/api/user/update-profile`,
      data,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }
  static async updateUserPassword(data) {
    const response = await axios.put(
      `${this.BASE_URL}/api/user/update-password`,
      data,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }

  static async deleteUser(userId) {
    const response = await axios.delete(
      `${this.BASE_URL}/users/delete/${userId}`,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }
  static async updateUserStatus(id, status) {
    const response = await axios.put(
        `${this.BASE_URL}/api/user/update-status/${id}`,
        { status: status },
        { headers: this.getHeader() }
    );
    return response.data;
}


  /*topic*/

  static async getTopics() {
    const response = await axios.get(
      `${this.BASE_URL}/api/topics/getAlltopics`,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }

  static async getTopicStatistics() {
    const response = await axios.get(`${this.BASE_URL}/api/topics/statistics`, {
      headers: this.getHeader(),
    });
    return response.data;
  }

  static async getTopicById(topicId) {
    try {
      const response = await axios.get(
        `${this.BASE_URL}/api/topics/getTopicById/${topicId}`,
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y ch·ªß ƒë·ªÅ theo id:", error);
      throw error;
    }
  }

  static async createTopic(topic) {
    try {
      const response = await axios.post(
        `${this.BASE_URL}/api/topics/createTopic`,
        topic,
        { headers: this.getHeader() }
      );
      return response.data;
    } catch (error) {
      console.error(
        "L·ªói khi t·∫°o ch·ªß ƒë·ªÅ:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  static async updateTopic(topicId, updatedData) {
    const response = await axios.put(
      `${this.BASE_URL}/api/topics/updateTopic/${topicId}`,
      updatedData,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }

  static async deleteTopic(id) {
    try {
      const response = await axios.delete(
        `${this.BASE_URL}/api/topics/deleteTopic/${id}`,
        { headers: this.getHeader() }
      );
      return response.data;
    } catch (error) {
      console.error(
        "L·ªói khi x√≥a ch·ªß ƒë·ªÅ:",
        error.response?.data || error.message
      );
      throw error;
    }
  }
  /** ARTICLES */

  static async postArticle(articleData) {
    const response = await axios.post(
      `${this.BASE_URL}/api/posts/createPost`,
      articleData,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }

  static async getPostById(postId) {
    try {
      const response = await axios.get(
        `${this.BASE_URL}/api/posts/getPostById/${postId}`,
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y b√†i vi·∫øt:", error);
      throw error;
    }
  }

  static async getPostsByTopic(topicId) {
    try {
      const response = await axios.get(
        `${this.BASE_URL}/api/posts/getPostsByTopic/${topicId}`,
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y b√†i vi·∫øt theo topic:", error);
      throw error;
    }
  }

  static async searchPosts(topic, keyword) {
    try {
      const params = new URLSearchParams();
      if (topic) params.append("topic", topic);
      if (keyword) params.append("search", keyword);

      const response = await axios.get(
        `${this.BASE_URL}/api/posts/search?${params.toString()}`,
        {
          headers: this.getHeader(),
        }
      );

      return response.data;
    } catch (error) {
      console.error("L·ªói khi t√¨m ki·∫øm b√†i vi·∫øt:", error);
      throw error;
    }
  }

  static async getAllPosts() {
    try {
      const response = await axios.get(
        `${this.BASE_URL}/api/posts/getAllPosts`,
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt:", error);
      throw error;
    }
  }
  static async updateArticle(articleData) {
    const response = await axios.put(
      `${this.BASE_URL}/api/posts/updatePost`,
      articleData,
      {
        headers: this.getHeader(),
        withCredentials: true,
      }
    );
    return response.data;
  }

  static async getUserPosts() {
    const response = await axios.get(
      `${this.BASE_URL}/api/posts/getPostsByUser`,
      {
        headers: this.getHeader(),
        withCredentials: true,
      }
    );
    return response.data;
  }

  static async deleteArticle(id) {
    try {
      const response = await axios.delete(
        `${this.BASE_URL}/api/posts/deletePost/${id}`,
        {
          headers: this.getHeader(),
          // withCredentials: true,
        }
      );
      return response.data; // Nh·∫≠n ph·∫£n h·ªìi t·ª´ API
    } catch (error) {
      console.error(
        "L·ªói khi x√≥a b√†i vi·∫øt:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  static async likeArticle(articleId) {
    try {
      const response = await axios.post(
        `${this.BASE_URL}/api/posts/${articleId}/like`,
        null, // Kh√¥ng c√≥ body n√™n ƒë·ªÉ null
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t l∆∞·ª£t like:", error);
      throw error;
    }
  }
  static async checkLiked(articleId) {
    try {
      console.log("id: ", articleId);
      const response = await axios.post(
        `${this.BASE_URL}/api/posts/${articleId}/checkLiked`,
        null, // Kh√¥ng c√≥ body n√™n ƒë·ªÉ null
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t l∆∞·ª£t like:", error);
      throw error;
    }
  }

  /** COMMENTS */
  static async addComment(articleId, commentData) {
    try {
      const response = await axios.post(
        `${this.BASE_URL}/api/posts/${articleId}/comments`,
        commentData,
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error(
        "L·ªói khi th√™m comment:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  static async getCommentsByPost(articleId) {
    try {
      const response = await axios.get(
        `${this.BASE_URL}/api/posts/${articleId}/comments`,
        { headers: this.getHeader() }
      );

      const comments = Array.isArray(response.data) ? response.data : []; // ƒê·∫£m b·∫£o `comments` lu√¥n l√† m·∫£ng

      return comments.map((comment) => ({
        ...comment,
        authorName: comment.name ?? "·∫®n danh",
        avatar: comment.avatar ?? "/default-avatar.png", // Hi·ªÉn th·ªã avatar
        formattedTime: comment.createdAt
          ? dayjs(comment.createdAt).fromNow()
          : "Kh√¥ng x√°c ƒë·ªãnh",
        replies: Array.isArray(comment.replies)
          ? comment.replies.map((reply) => ({
              ...reply,
              authorName: reply.name ?? "·∫®n danh",
              avatar: reply.avatar ?? "/default-avatar.png", // Hi·ªÉn th·ªã avatar cho reply
              formattedTime: reply.createdAt
                ? dayjs(reply.createdAt).fromNow()
                : "Kh√¥ng x√°c ƒë·ªãnh",
            }))
          : [],
      }));
    } catch (error) {
      console.error(
        "L·ªói khi l·∫•y danh s√°ch comment:",
        error.response?.data || error.message
      );
      return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu c√≥ l·ªói
    }
  }

  /** X√≥a b√¨nh lu·∫≠n */
  static async deleteComment(commentId) {
    try {
      const response = await axios.delete(
        `${this.BASE_URL}/api/posts/comments/${commentId}`, // X√≥a d·∫•u `}` th·ª´a
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error(
        "L·ªói khi x√≥a comment:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  static async replyToComment(articleId, parentId, replyContent) {
    try {
      const payload = {
        postId: articleId, // Th√™m postId ƒë·ªÉ backend nh·∫≠n ƒë√∫ng d·ªØ li·ªáu
        content: replyContent,
      };

      if (parentId) payload.parentId = parentId; // Ch·ªâ th√™m n·∫øu c√≥ gi√° tr·ªã h·ª£p l·ªá

      const response = await axios.post(
        `${this.BASE_URL}/api/posts/${articleId}/reply`,
        payload,
        { headers: this.getHeader() }
      );

      return response.data;
    } catch (error) {
      console.error(
        "L·ªói khi g·ª≠i ph·∫£n h·ªìi:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  static async getCommentsWithReplies(articleId) {
    try {
      const response = await axios.get(
        `${this.BASE_URL}/api/posts/${articleId}/commentsWithReplies`,
        { headers: this.getHeader() }
      );
      return response.data.map((comment) => ({
        ...comment,
        formattedTime: dayjs(comment.createdAt).fromNow(),
        replies:
          comment.replies?.map((reply) => ({
            ...reply,
            formattedTime: dayjs(reply.createdAt).fromNow(),
          })) || [],
      }));
    } catch (error) {
      console.error(
        "L·ªói khi l·∫•y danh s√°ch b√¨nh lu·∫≠n k√®m ph·∫£n h·ªìi:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  static async submitConsultationRequest(consultationData) {
    try {
      const formattedData = {
        ...consultationData,
        dateOfBirth: consultationData.dateOfBirth.split("T")[0], // ƒê·ªãnh d·∫°ng `YYYY-MM-DD`
      };

      const response = await axios.post(
        `${this.BASE_URL}/consultations/register`,
        formattedData,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`, // G·ª≠i token
            "Content-Type": "application/json",
          },
          withCredentials: true, // H·ªó tr·ª£ x√°c th·ª±c
        }
      );

      return response.data;
    } catch (error) {
      console.error(
        "L·ªói khi g·ª≠i y√™u c·∫ßu t∆∞ v·∫•n:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  /** CONSULTATION - API L·∫§Y DANH S√ÅCH T∆Ø V·∫§N */
  static async getUserConsultations() {
    const response = await axios.get(
      `${this.BASE_URL}/consultations/myrequests`,
      {
        headers: this.getHeader(),
        //withCredentials: true,
      }
    );
    return response.data;
  }

  static async getAllConsultationRequests() {
    try {
      const response = await axios.get(
        `${this.BASE_URL}/consultations/getAllRequests`,
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error(
        "L·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  static async updateConsultationStatus(id, newStatus) {
    try {
      const response = await axios.put(
        `${this.BASE_URL}/consultations/${id}/status`,
        { status: newStatus },
        { headers: this.getHeader() }
      );
      return response.data;
    } catch (error) {
      console.error(
        "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i t∆∞ v·∫•n:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  /** CUSTOMER MANAGEMENT */

  static async searchUserByPhone(phone) {
    const response = await axios.get(
      `${this.BASE_URL}/api/admin/user/search?phone=${phone}`,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }

  static async updateUserAccount(id, updatedData) {
    const response = await axios.put(
      `${this.BASE_URL}/api/admin/update-account/${id}`,
      updatedData,
      { headers: this.getHeader() }
    );
    return response.data;
  }

  static async deleteUserAccount(id) {
    const response = await axios.delete(
      `${this.BASE_URL}/api/admin/delete-account/${id}`,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }

  static async createUserAccount(userData) {
    const response = await axios.post(
      `${this.BASE_URL}/api/admin/create-user`,
      userData,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }

  /** ARTICLE STATS (ADMIN) */
  static async getPostStatsByDate(from, to) {
    const response = await axios.get(
      `${this.BASE_URL}/api/admin/posts/article-by-date`,
      {
        headers: this.getHeader(),
        params: { from, to },
      }
    );
    return response.data;
  }

  static async getTopCommenters() {
    const response = await axios.get(
      `${this.BASE_URL}/api/admin/users/top-commenters`,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }
  static async getTopWriters() {
    const response = await axios.get(
      `${this.BASE_URL}/api/admin/users/top-writers`,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }
  static async getTopInteractedPosts() {
    const response = await axios.get(
      `${this.BASE_URL}/api/admin/posts/top-interacted`,
      {
        headers: this.getHeader(),
      }
    );
    return response.data;
  }

  /*Qu·∫£n l√Ω report*/
  static async getAllReports(page = 0, size = 10) {
    try {
      const response = await axios.get(`${this.BASE_URL}/api/reports/all`, {
        params: { page, size },
        headers: this.getHeader(),
      });
      return response.data; // Backend c·∫ßn tr·∫£ v·ªÅ { content: [...], totalPages: n }
    } catch (error) {
      console.error(
        "L·ªói khi l·∫•y danh s√°ch b√°o c√°o:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  static async updateReportStatus(contentId, status) {
    try {
      const response = await axios.put(
        `${
          this.BASE_URL
        }/api/reports/${contentId}/updateStatus?status=${encodeURIComponent(
          status
        )}`,
        {}, // Do request c·ªßa b·∫°n kh√¥ng c·∫ßn body, n√™n truy·ªÅn object r·ªóng
        {
          headers: this.getHeader(),
        }
      );
      return response.data;
    } catch (error) {
      console.error(
        "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i b√°o c√°o:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  static async createReport(reportData) {
    try {
      const response = await axios.post(
        `${this.BASE_URL}/api/reports/create`,
        reportData,
        { headers: this.getHeader() }
      );
      return response.data;
    } catch (error) {
      console.error(
        "L·ªói t·∫°o b√°o c√°o vi ph·∫°m:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  /** AUTHENTICATION CHECKER */
  static logout() {
    localStorage.removeItem("token");
    localStorage.removeItem("roles");
  }

  static isAuthenticated() {
    const token = localStorage.getItem("token");
    return !!token;
  }

  static isAdmin() {
    const role = localStorage.getItem("roles");
    return role === "ROLE_ADMIN";
  }

  static isUser() {
    const role = localStorage.getItem("roles");
    return role === "ROLE_USER";
  }
}
